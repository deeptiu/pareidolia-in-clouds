# -*- coding: utf-8 -*-
"""Testing_Style_Transfer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yZnvPA_R7EDcVNUJNupLfhfr8h6z-HAK
"""

from __future__ import print_function

import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import torchvision
from matplotlib.image import imsave

from PIL import Image
import matplotlib.pyplot as plt

import torchvision.transforms as transforms
import torchvision.models as models
from torchvision.utils import save_image

import copy

import time
import os
import numpy as np

import torchvision
from PIL import Image

imsize = 512

loader_style = transforms.Compose([
    transforms.Resize((imsize, imsize)),  # scale imported image
    transforms.ToTensor()])  # transform it into a torch tensor
    
loader_content = transforms.Compose([
    transforms.Resize((imsize, imsize)),  # scale imported image
    # transforms.GaussianBlur(25, sigma=(10,20)),
    transforms.ToTensor()])  # transform it into a torch tensor

def image_loader_style(image_name):
    image = Image.open(image_name)
    # fake batch dimension required to fit network's input dimensions
    image = loader_style(image).unsqueeze(0)
    return image.to(device, torch.float)

def image_loader_content(image_name):
    image = Image.open(image_name)
    # fake batch dimension required to fit network's input dimensions
    image = loader_content(image).unsqueeze(0)
    return image.to(device, torch.float)


def imshow(tensor, unloader, title=None):
    image = tensor.cpu().clone()  # we clone the tensor to not do changes on it
    image = image.squeeze(0)      # remove the fake batch dimension
    image = unloader(image)
    plt.imshow(image)
    if title is not None:
        plt.title(title)
    plt.pause(0.001) # pause a bit so that plots are updated

class ContentLoss(nn.Module):

    def __init__(self, target,):
        super(ContentLoss, self).__init__()
        # we 'detach' the target content from the tree used
        # to dynamically compute the gradient: this is a stated value,
        # not a variable. Otherwise the forward method of the criterion
        # will throw an error.
        self.target = target.detach()

    def forward(self, input):
        self.loss = F.mse_loss(input, self.target)
        return input

def gram_matrix(input):
    a, b, c, d = input.size()  # a=batch size(=1)
    # b=number of feature maps
    # (c,d)=dimensions of a f. map (N=c*d)

    features = input.view(a * b, c * d)  # resise F_XL into \hat F_XL

    G = torch.mm(features, features.t())  # compute the gram product

    # we 'normalize' the values of the gram matrix
    # by dividing by the number of element in each feature maps.
    return G.div(a * b * c * d)

class StyleLoss(nn.Module):

    def __init__(self, target_feature):
        super(StyleLoss, self).__init__()
        self.target = gram_matrix(target_feature).detach()

    def forward(self, input):
        G = gram_matrix(input)
        self.loss = F.mse_loss(G, self.target)
        return input


# create a module to normalize input image so we can easily put it in a
# nn.Sequential
class Normalization(nn.Module):
    def __init__(self, mean, std):
        super(Normalization, self).__init__()
        # .view the mean and std to make them [C x 1 x 1] so that they can
        # directly work with image Tensor of shape [B x C x H x W].
        # B is batch size. C is number of channels. H is height and W is width.
        self.mean = torch.tensor(mean).view(-1, 1, 1)
        self.std = torch.tensor(std).view(-1, 1, 1)

    def forward(self, img):
        # normalize img
        return (img - self.mean) / self.std

# desired depth layers to compute style/content losses :
content_layers_default = ['conv_2']
style_layers_default = ['conv_1', 'conv_2', 'conv_3', 'conv_4', 'conv_5']

def get_style_model_and_losses(cnn, normalization_mean, normalization_std,
                               style_img, content_img,
                               content_layers=content_layers_default,
                               style_layers=style_layers_default):
    # normalization module
    normalization = Normalization(normalization_mean, normalization_std).to(device)

    # just in order to have an iterable access to or list of content/syle
    # losses
    content_losses = []
    style_losses = []

    # assuming that cnn is a nn.Sequential, so we make a new nn.Sequential
    # to put in modules that are supposed to be activated sequentially
    model = nn.Sequential(normalization)

    i = 0  # increment every time we see a conv
    for layer in cnn.children():
        if isinstance(layer, nn.Conv2d):
            i += 1
            name = 'conv_{}'.format(i)
        elif isinstance(layer, nn.ReLU):
            name = 'relu_{}'.format(i)
            # The in-place version doesn't play very nicely with the ContentLoss
            # and StyleLoss we insert below. So we replace with out-of-place
            # ones here.
            layer = nn.ReLU(inplace=False)
        elif isinstance(layer, nn.MaxPool2d):
            name = 'pool_{}'.format(i)
        elif isinstance(layer, nn.BatchNorm2d):
            name = 'bn_{}'.format(i)
        else:
            raise RuntimeError('Unrecognized layer: {}'.format(layer.__class__.__name__))

        model.add_module(name, layer)

        if name in content_layers:
            # add content loss:
            target = model(content_img).detach()
            content_loss = ContentLoss(target)
            model.add_module("content_loss_{}".format(i), content_loss)
            content_losses.append(content_loss)

        if name in style_layers:
            # add style loss:
            target_feature = model(style_img).detach()
            style_loss = StyleLoss(target_feature)
            model.add_module("style_loss_{}".format(i), style_loss)
            style_losses.append(style_loss)

    # now we trim off the layers after the last content and style losses
    for i in range(len(model) - 1, -1, -1):
        if isinstance(model[i], ContentLoss) or isinstance(model[i], StyleLoss):
            break

    model = model[:(i + 1)]

    return model, style_losses, content_losses

# input_img = content_img.clone()
# # if you want to use white noise instead uncomment the below line:
# # input_img = torch.randn(content_img.data.size(), device=device)

# # add the original input image to the figure:
# plt.figure()
# imshow(input_img, title='Input Image')

def get_input_optimizer(input_img):
    # this line to show that input is a parameter that requires a gradient
    optimizer = optim.LBFGS([input_img], lr=0.5)
    scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=100, gamma=0.2, verbose=True)
    return optimizer, scheduler

def run_style_transfer(cnn, normalization_mean, normalization_std,
                       content_img, style_img, input_img, num_steps=2000,
                       style_weight=1000000, content_weight=0.1):
    global done
    global best_image
    global best_loss
    global first_shot

    done = False
    best_image = None
    best_loss = 1e20

    """Run the style transfer."""
    model, style_losses, content_losses = get_style_model_and_losses(cnn,
        normalization_mean, normalization_std, style_img, content_img)

    # We want to optimize the input and not the model parameters so we
    # update all the requires_grad fields accordingly
    input_img.requires_grad_(True)
    model.requires_grad_(False)

    optimizer, scheduler = get_input_optimizer(input_img)

    run = [0]
    while run[0] <= num_steps:

        def closure():
            
            global done
            global best_image
            global best_loss
            global first_shot

            # correct the values of updated input image
            with torch.no_grad():
                input_img.clamp_(0, 1)

            optimizer.zero_grad()
            model(input_img)
            style_score = 0
            content_score = 0

            for sl in style_losses:
                style_score += sl.loss
            for cl in content_losses:
                content_score += cl.loss

            style_score *= style_weight
            content_score *= content_weight

            loss = style_score + content_score
            loss.backward()

            run[0] += 1
            # if run[0] % 50 == 0:
                # print("run {}:".format(run))
                # print('Style Loss : {:4f} Content Loss: {:4f}'.format(
                #     style_score.item(), content_score.item()))
                # print()
            
            if (style_score + content_score).item() < best_loss:
                best_loss = (style_score + content_score).item()
                best_image = input_img.clone()

            # if style_score < 0.095:
            #     print(f"EARLY STOPPING: {style_score}")
            #     with torch.no_grad():
            #         done = True

            return style_score + content_score
        
        if done == True:
            # print(f"CAME TO DONE: TRUE")
            with torch.no_grad():
                best_image.clamp_(0, 1)

            return best_image
        
        optimizer.step(closure)
        if best_loss < 5 and not first_shot:
            first_shot = True
            for g in optimizer.param_groups:
                g['lr'] = g['lr'] * 0.08


    # a last correction...
    with torch.no_grad():
        best_image.clamp_(0, 1)
    # print(f"BEST SCORE: {best_loss}")
    return best_image


def do_style_transfer(model, class_name, image_path, sky_path, save_path, label_to_class_map, cnn, cnn_normalization_mean, cnn_normalization_std):

    style_image = image_loader_style(sky_path)
    content_image = image_loader_content(image_path).squeeze()
    input_image = content_image.clone()

    pred = model([content_image.squeeze()])[0]

    # move through the labels and masks... add the masks that work with the class required
    labels = pred['labels'].detach().cpu().numpy()
    masks = (pred['masks']>0.5).float()

    main_mask = torch.zeros((1, imsize, imsize)).to(device)

    for label, mask in zip(labels, masks):
        class_label = label_to_class_map[label]
        if label_to_class_map[label] == class_name:
            main_mask += mask

    main_mask = torch.where(main_mask >= 1, 1.0, 0.0).squeeze()

    mask_trial = torch.stack((main_mask, main_mask, main_mask))
    gaussian_blur = torchvision.transforms.GaussianBlur((3, 3), sigma=(4,4))
    grayscale = torchvision.transforms.Grayscale(3)
    # mask_trial = transform_mask(mask_trial)


    # imshow(main_mask, title="Masked Image")
    masked_image = main_mask * grayscale(content_image)
    # print(mask_trial.shape)
    # imshow(masked_image, title="Masked Image")

    # print(masked_image.shape, style_image.shape, input_image.shape)

    output = run_style_transfer(cnn, cnn_normalization_mean, cnn_normalization_std,
                                masked_image.unsqueeze(0), style_image, mask_trial.unsqueeze(0))
    output = gaussian_blur(output)

    # plt.figure()
    # imshow(output, title='Output Image')

    save_image(output, save_path)

    # sphinx_gallery_thumbnail_number = 4
    # plt.ioff()
    # plt.show()

    

    # save the image


# !kaggle datasets download -d alessiocorrado99/animals10
# !unzip animals10.zip

# Commented out IPython magic to ensure Python compatibility.
# %cd data


device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

# desired size of the output image
imsize = 512 if torch.cuda.is_available() else 128  # use small size if no gpu

# style_img = image_loader(style_filename, loader_style, device)
# content_img = image_loader(content_filename, loader_content, device)

cnn = models.vgg19(pretrained=True).features.to(device).eval()

cnn_normalization_mean = torch.tensor([0.485, 0.456, 0.406]).to(device)
cnn_normalization_std = torch.tensor([0.229, 0.224, 0.225]).to(device)

done = False
best_image = None
best_loss = 1e20

first_shot = False

model = torchvision.models.detection.maskrcnn_resnet50_fpn(pretrained=True)
model.to(device)
model.eval()

cls = 'dog'
COCO_INSTANCE_CATEGORY_NAMES = [
    '__background__', 'person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus',
    'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'N/A', 'stop sign',
    'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow',
    'elephant', 'bear', 'zebra', 'giraffe', 'N/A', 'backpack', 'umbrella', 'N/A', 'N/A',
    'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball',
    'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket',
    'bottle', 'N/A', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl',
    'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza',
    'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'N/A', 'dining table',
    'N/A', 'N/A', 'toilet', 'N/A', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone',
    'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'N/A', 'book',
    'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush'
]

label_to_class_map = {k:v for k, v in enumerate(COCO_INSTANCE_CATEGORY_NAMES)}
class_to_label_map = {v:k for k, v in enumerate(COCO_INSTANCE_CATEGORY_NAMES)}

start = time.time()


class_map = {"dog": "cane", "elephant": "elefante", "chicken": "gallina", "cat": "gatto", "cow": "mucca", "horse":"cavallo"}

def create_cloud_images_by_class(class_name, data_path):
    working_directory = f"{data_path}/raw-img/{class_map[class_name]}"

    for i, f in enumerate(os.listdir(working_directory)):
        if i > 600:
            break
        image_path = os.path.join(working_directory, f)
        sky_path = os.path.join(data_path, f"sky/{np.random.randint(4, 9)}.jpeg")
        save_path = os.path.join(f'data/created-images/{i}_{class_name}.jpeg')
        do_style_transfer(model, class_name, image_path, sky_path, save_path, label_to_class_map, cnn, cnn_normalization_mean, cnn_normalization_std)
        print(f"TOTAL TIME: {time.time() - start}s")

class_name = 'dog'
try:
    os.makedirs(f'data/created-images')
except:
    pass
create_cloud_images_by_class(class_name, '../../cloud_patterns')


# class_name = 'horse'
# try:
#     os.makedirs(f'data/created-images')
# except:
#     pass
# create_cloud_images_by_class(class_name, '../../cloud_patterns')