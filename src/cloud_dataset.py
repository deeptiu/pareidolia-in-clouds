from __future__ import print_function
import numpy as np
import os
import xml.etree.ElementTree as ET

import torch
import torch.nn
from PIL import Image
from torch.utils.data import Dataset
from torchvision import transforms
from torchvision.transforms import ToTensor


class CloudDataset(Dataset):

    # TODO Q1.2: Adjust data_dir according to where **you** stored the data
    def __init__(self, img_dir="", size=512, split="train"):
        super().__init__()
        self.img_dir = img_dir
        self.size = size
        self.split = split

        self.filenames = [os.path.join(self.img_dir, f) for f in os.listdir(self.img_dir) if ".DS" not in f]
        print(self.filenames)

        self.class_names = ["dog", "horse", "elephant", "cat", "sheep"]
        self.inv_class = {}
        for i in range(len(self.class_names)):
            self.inv_class[self.class_names[i]] = i
    
    def __len__(self):
        return len(self.filenames)

    def __getitem__(self, index):
        """
        :param index: a int generated by Dataloader in range [0, __len__()]
        :return: index-th element
        image: FloatTensor in shape of (C, H, W) in scale [-1, 1].
        label: LongTensor in shape of (Nc, ) binary label
        weight: FloatTensor in shape of (Nc, ) difficult or not.
        """
        fpath = self.filenames[index]
        image = Image.open(fpath)
        # print (image)
        # image = image.convert("RGB")

        transform = transforms.Compose([
            # transforms.Grayscale(3),
            transforms.Resize([self.size, self.size]),
            transforms.ToTensor(),
        ])
        image = transform(image)
        # print (torch.unique(image))
        # print (image.shape)
        if self.split == "train":
            class_name = fpath.split("/")[-1].split("_")[1].split(".")[0]
            # print(f"class: {class_name}, {self.inv_class[class_name]}")
            class_label = self.inv_class[class_name]
            return image, class_label
        else:
            return image